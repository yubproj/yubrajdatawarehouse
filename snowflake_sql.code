--part a --
create database bluejay_citibike;


create schema bluejay_citibike.intro_to_snowflake;

create or replace table trips(
tripduration integer,
starttime timestamp,
stoptime timestamp,
start_station_id integer,
start_station_name string,
start_station_latitude float,
start_station_longitude float,
end_station_id integer,
end_station_name string,
end_station_latitude float, 
end_station_longitude float,
bikeid integer, 
membership_type string,
usertype string,
birth_year integer,
gender integer
);




create stage citibike_trips
url = 's3://snowflake-workshop-lab/citibike-trips-csv/ ';

list @citibike_trips;


create or replace file format csv 
type='csv'
  compression = 'auto' field_delimiter = ',' record_delimiter = '\n'
  skip_header = 0 field_optionally_enclosed_by = '\042' trim_space = false
  error_on_column_count_mismatch = false escape = 'none' escape_unenclosed_field = '\134'
  date_format = 'auto' timestamp_format = 'auto' null_if = ('') 
  comment = 'file format for ingesting data for ICE: Intro to Snowflake';

  show warehouses;
  create warehouse bluejay_wh;
  use warehouse bluejay_wh;


  alter warehouse if exists bluejay_wh set warehouse_size = 'Large';


  copy into trips from @citibike_trips
        file_format = csv
        pattern = '.*csv.*';

--Large warehouse: 13s

truncate table trips;


  alter warehouse if exists bluejay_wh set warehouse_size = 'x-small';

  copy into trips from @citibike_trips
        file_format = csv
        pattern = '.*csv.*';

--X-small warehouse: 58s
select top 10 * from trips ;

select 
start_station_name as station_name,
count(*) as total_rides
from trips
group by station_name
order by total_rides desc;





select
month(starttime) as cal_month,
count(*) as total_rides
from trips
group by all
order by 2 desc;


create or replace table trips_cloned clone trips;
select top 10 * FROM trips_cloned;

--part c --

create database bluejay_weather;

create table jason_weather_data (
v variant 
);

create stage nyc_weather
url = 's3://snowflake-workshop-lab/zero-weather-nyc';

list @nyc_weather;

copy into jason_weather_data from @nyc_weather
file_format = (type = json
                strip_outer_array = true);


 select * from jason_weather_data limit 25;


 create or replace view jason_weather_data_view as
select
    v:obsTime::timestamp as observation_time,
    v:station::string as station_id,
    v:name::string as city_name,
    v:country::string as country,
    v:latitude::float as city_lat,
    v:longitude::float as city_lon,
    v:weatherCondition::string as weather_conditions,
    v:coco::int as weather_conditions_code,
    v:temp::float as temp,
    v:prcp::float as rain,
    v:tsun::float as tsun,
    v:wdir::float as wind_dir,
    v:wspd::float as wind_speed,
    v:dwpt::float as dew_point,
    v:rhum::float as relative_humidity,
    v:pres::float as pressure
from
    jason_weather_data
where
    station_id = '72502';

    select * from jason_weather_data_view limit25;


    select 
    weather_conditions,
    count(*) as num_trips
    from bluejay_citibike.intro_to_snowflake.trips cb 
    inner join bluejay_weather.public.jason_weather_data_view w 
    on date_trunc('hour',w.observation_time) = date_trunc('hour',cb.starttime)
    group by all
    order by num_trips desc;
--part d --
use schema bluejay_citibike.intro_to_snowflake;
update trips set start_station_name = 'YAHOO!';

SELECT start_station_name AS "Station", COUNT(*) AS "Rides"
FROM Trips
GROUP BY start_station_name
ORDER BY 2 DESC
LIMIT 20;

set query_id =
(select query_id from table(information_schema.query_history_by_session (result_limit=>5))
where query_text like 'update%' order by start_time desc limit 1);

create or replace table trips as (select * from trips before (statement => $query_id));
